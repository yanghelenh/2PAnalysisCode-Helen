% plotAllKernels.m
%
% Function to plot all kernels, where those relating the same variables in
%  the same direction are plotted on the same subplot. I.e. the yaw
%  velocity forward kernel for left, right, sum, and diff. Also shows
%  variance explained. Produces 1 plot, with subplots.
% Requires the structs generated by extractAllKernels()
%
% INPUT:
%   kernels - kernels struct from extractAllKernels()
%   kernelParams - kernel parameters struct
%   ttl - title for whole plot
%
% OUTPUT:
%   f - handle to figure
%   also produces plot
%
% CREATED: 5/24/19
% UPDATED: 5/24/19
%

function f = plotAllKernels(kernels, kernelParams, ttl)
    % get all fields in kernels struct (which kernels computed)
    kernelFields = fieldnames(kernels);

    numSubplots = length(kernelFields);
    subplotRows = 2;
    subplotCols = ceil(numSubplots/subplotRows);
    
    
    f = figure;
    
    for i = 1:numSubplots
        % kernel fields to subplot mapping so forward and reverse kernels
        %  on top of each other; only works when subplotRows = 2
        if (mod(i,subplotRows)==1)
            whichSubplot = ceil(i/subplotRows);
        else
            whichSubplot = subplotCols + (i/subplotRows);
        end
        
        % flip axis for reverse kernels
        if (kernelFields{i}(1) == 'r')
            lags = -1 * kernelParams.t;
        else
            lags = kernelParams.t;
        end
            
        
        subplot(subplotRows, subplotCols, whichSubplot);
        hold on;
        for j = 1:length(kernels)
            plot(lags, kernels(j).(kernelFields{i}).kernel, ...
                'LineWidth', 1.5);
            
            % generate legend text with which cell/sum/diff and variance
            %  explained
            switch j 
                case 1
                    legendTxt{j} = sprintf('Left %.2f', ...
                        kernels(j).(kernelFields{i}).varExpl);
                case 2
                    legendTxt{j} = sprintf('Right %.2f', ...
                        kernels(j).(kernelFields{i}).varExpl);   
                case 3
                    legendTxt{j} = sprintf('Sum %.2f', ...
                        kernels(j).(kernelFields{i}).varExpl);    
                case 4
                    legendTxt{j} = sprintf('Diff %.2f', ...
                        kernels(j).(kernelFields{i}).varExpl);   
            end            
        end
        
        xlabel('Time (s)');
        xlim([-1*kernelParams.winLen kernelParams.winLen]);
        
%         if (strcmpi(kernelFields{i}, 'fFwdVel'))
%             ylim([-2e-4 6e-4]);
%         elseif (strcmpi(kernelFields{i}, 'fYawVel'))
%             ylim([-2e-5 4e-5]);
%         elseif (strcmpi(kernelFields{i}, 'rYawVel'))
%             ylim([-40 60]);
%         end
        y = ylim;
        
        % x-axis line
        line([-1*kernelParams.winLen kernelParams.winLen], [0,0],...
            'Color', 'black');
        
        % y-axis line
        line([0,0], y, 'Color', 'black');
        ylim(y);
        
        title(kernelFields{i});
        legend(legendTxt);
       
        
    end
    
    suptitle(ttl);
    
end